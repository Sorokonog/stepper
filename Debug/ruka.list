
ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006264  08006264  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800626c  0800626c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000078  080062e8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080062e8  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000032  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112df  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002119  00000000  00000000  00031385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000334a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  000344d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226ea  00000000  00000000  00035440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001240d  00000000  00000000  00057b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4af9  00000000  00000000  00069f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ea30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e4  00000000  00000000  0013ea80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006234 	.word	0x08006234

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08006234 	.word	0x08006234

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 ff52 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f83a 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 fa1e 	bl	8001320 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ee4:	f000 f8a2 	bl	800102c <MX_CAN1_Init>
  MX_SPI1_Init();
 8000ee8:	f000 f904 	bl	80010f4 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000eec:	f000 f9e2 	bl	80012b4 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000ef0:	f000 f8d2 	bl	8001098 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f936 	bl	8001164 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ef8:	f000 f986 	bl	8001208 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2102      	movs	r1, #2
 8000f00:	480e      	ldr	r0, [pc, #56]	; (8000f3c <main+0x68>)
 8000f02:	f002 f91b 	bl	800313c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 ffac 	bl	8001e64 <HAL_Delay>
  TORQUE_Reg_Set();
 8000f0c:	f000 fb14 	bl	8001538 <TORQUE_Reg_Set>
  HAL_Delay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f000 ffa7 	bl	8001e64 <HAL_Delay>
  CTRL_Reg_Set();
 8000f16:	f000 fadb 	bl	80014d0 <CTRL_Reg_Set>




  //initialize CAN
      CAN_Header_Config(&TxHeader);		// Sets header values
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <main+0x6c>)
 8000f1c:	f000 fa9d 	bl	800145a <CAN_Header_Config>
      CAN_Filter_Config(&canfilterconfig);// Sets filter values
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <main+0x70>)
 8000f22:	f000 fa71 	bl	8001408 <CAN_Filter_Config>
      CAN_Starter(&hcan1, &canfilterconfig); // Starts can
 8000f26:	4907      	ldr	r1, [pc, #28]	; (8000f44 <main+0x70>)
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <main+0x74>)
 8000f2a:	f000 faad 	bl	8001488 <CAN_Starter>
      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

   //set the direction of rotTION FOR TEST PURPOSE
      //HAL_Delay(10);

      HAL_TIM_Base_Start_IT(&htim7);
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <main+0x78>)
 8000f30:	f004 f9e8 	bl	8005304 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Start_IT(&htim2);
 8000f34:	4806      	ldr	r0, [pc, #24]	; (8000f50 <main+0x7c>)
 8000f36:	f004 f9e5 	bl	8005304 <HAL_TIM_Base_Start_IT>
      //HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <main+0x66>
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	20000250 	.word	0x20000250
 8000f44:	20000268 	.word	0x20000268
 8000f48:	20000094 	.word	0x20000094
 8000f4c:	200001f8 	.word	0x200001f8
 8000f50:	20000168 	.word	0x20000168

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2234      	movs	r2, #52	; 0x34
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 f880 	bl	8006068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <SystemClock_Config+0xd0>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a28      	ldr	r2, [pc, #160]	; (8001024 <SystemClock_Config+0xd0>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <SystemClock_Config+0xd0>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <SystemClock_Config+0xd4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <SystemClock_Config+0xd4>)
 8000f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <SystemClock_Config+0xd4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000fc8:	23a0      	movs	r3, #160	; 0xa0
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fbad 	bl	800473c <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fe8:	f000 fafc 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	2105      	movs	r1, #5
 800100a:	4618      	mov	r0, r3
 800100c:	f003 f860 	bl	80040d0 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001016:	f000 fae5 	bl	80015e4 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	; 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_CAN1_Init+0x64>)
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_CAN1_Init+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_CAN1_Init+0x64>)
 8001038:	2205      	movs	r2, #5
 800103a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_CAN1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_CAN1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_CAN1_Init+0x64>)
 800104a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800104e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_CAN1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_CAN1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_CAN1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_CAN1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_CAN1_Init+0x64>)
 800106a:	2201      	movs	r2, #1
 800106c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_CAN1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_CAN1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_CAN1_Init+0x64>)
 800107c:	f000 ff16 	bl	8001eac <HAL_CAN_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001086:	f000 faad 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000094 	.word	0x20000094
 8001094:	40006400 	.word	0x40006400

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f002 f865 	bl	80031a4 <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 fa80 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000bc 	.word	0x200000bc
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_SPI1_Init+0x68>)
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <MX_SPI1_Init+0x6c>)
 80010fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_SPI1_Init+0x68>)
 8001100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001104:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_SPI1_Init+0x68>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_SPI1_Init+0x68>)
 800110e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001112:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_SPI1_Init+0x68>)
 8001116:	2202      	movs	r2, #2
 8001118:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_SPI1_Init+0x68>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_SPI1_Init+0x68>)
 8001122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001126:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_SPI1_Init+0x68>)
 800112a:	2238      	movs	r2, #56	; 0x38
 800112c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_SPI1_Init+0x68>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_SPI1_Init+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_SPI1_Init+0x68>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_SPI1_Init+0x68>)
 8001142:	220a      	movs	r2, #10
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_SPI1_Init+0x68>)
 8001148:	f003 fd96 	bl	8004c78 <HAL_SPI_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001152:	f000 fa47 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000110 	.word	0x20000110
 8001160:	40013000 	.word	0x40013000

08001164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_TIM2_Init+0xa0>)
 8001184:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001188:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_TIM2_Init+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_TIM2_Init+0xa0>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_TIM2_Init+0xa0>)
 8001198:	2201      	movs	r2, #1
 800119a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_TIM2_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_TIM2_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a8:	4816      	ldr	r0, [pc, #88]	; (8001204 <MX_TIM2_Init+0xa0>)
 80011aa:	f004 f85b 	bl	8005264 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b4:	f000 fa16 	bl	80015e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80011b8:	2307      	movs	r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_TIM2_Init+0xa0>)
 80011d0:	f004 fabc 	bl	800574c <HAL_TIM_SlaveConfigSynchro>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011da:	f000 fa03 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM2_Init+0xa0>)
 80011ec:	f004 fe82 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011f6:	f000 f9f5 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000168 	.word	0x20000168

08001208 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM3_Init+0xa4>)
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <MX_TIM3_Init+0xa8>)
 800122e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM3_Init+0xa4>)
 8001232:	2218      	movs	r2, #24
 8001234:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM3_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_TIM3_Init+0xa4>)
 800123e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001242:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM3_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_TIM3_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <MX_TIM3_Init+0xa4>)
 8001252:	f004 f8c7 	bl	80053e4 <HAL_TIM_OC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800125c:	f000 f9c2 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001260:	2350      	movs	r3, #80	; 0x50
 8001262:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	4619      	mov	r1, r3
 800126e:	480f      	ldr	r0, [pc, #60]	; (80012ac <MX_TIM3_Init+0xa4>)
 8001270:	f004 fe40 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800127a:	f000 f9b3 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800127e:	2310      	movs	r3, #16
 8001280:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2204      	movs	r2, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_TIM3_Init+0xa4>)
 8001296:	f004 f9fd 	bl	8005694 <HAL_TIM_OC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80012a0:	f000 f9a0 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200001b0 	.word	0x200001b0
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM7_Init+0x64>)
 80012c4:	4a15      	ldr	r2, [pc, #84]	; (800131c <MX_TIM7_Init+0x68>)
 80012c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 49;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_TIM7_Init+0x64>)
 80012ca:	2231      	movs	r2, #49	; 0x31
 80012cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_TIM7_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 15999;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_TIM7_Init+0x64>)
 80012d6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80012da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_TIM7_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_TIM7_Init+0x64>)
 80012e4:	f003 ffbe 	bl	8005264 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80012ee:	f000 f979 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_TIM7_Init+0x64>)
 8001300:	f004 fdf8 	bl	8005ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800130a:	f000 f96b 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001f8 	.word	0x200001f8
 800131c:	40001400 	.word	0x40001400

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MX_GPIO_Init+0xdc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a28      	ldr	r2, [pc, #160]	; (80013fc <MX_GPIO_Init+0xdc>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a21      	ldr	r2, [pc, #132]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <MX_GPIO_Init+0xdc>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_GPIO_Init+0xdc>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	21c2      	movs	r1, #194	; 0xc2
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0xe0>)
 80013ac:	f001 fec6 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2110      	movs	r1, #16
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_GPIO_Init+0xe4>)
 80013b6:	f001 fec1 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80013ba:	23c2      	movs	r3, #194	; 0xc2
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <MX_GPIO_Init+0xe0>)
 80013d2:	f001 fd1f 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d6:	2310      	movs	r3, #16
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_GPIO_Init+0xe4>)
 80013ee:	f001 fd11 	bl	8002e14 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020000 	.word	0x40020000

08001408 <CAN_Filter_Config>:

/* USER CODE BEGIN 4 */

int CAN_Filter_Config(CAN_FilterTypeDef* canfilterconfig){
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	canfilterconfig->FilterActivation = CAN_FILTER_ENABLE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	621a      	str	r2, [r3, #32]
	canfilterconfig->FilterBank = 0;  // which filter bank to use from the assigned ones
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
	canfilterconfig->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
	canfilterconfig->FilterMode = CAN_FILTERMODE_IDMASK;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
	canfilterconfig->FilterScale = CAN_FILTERSCALE_32BIT;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	61da      	str	r2, [r3, #28]
	canfilterconfig->FilterIdHigh = 0x0000;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	canfilterconfig->FilterIdLow = 0x0000;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
	canfilterconfig->FilterMaskIdHigh = 0x0000;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
	canfilterconfig->FilterMaskIdLow = 0x0000;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
	canfilterconfig->SlaveStartFilterBank = 20;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2214      	movs	r2, #20
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <CAN_Header_Config>:

int CAN_Header_Config(CAN_TxHeaderTypeDef* TxHeader){
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	TxHeader->IDE = CAN_ID_STD;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	TxHeader->StdId = MY_CAN_ID;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	220f      	movs	r2, #15
 800146c:	601a      	str	r2, [r3, #0]
	TxHeader->RTR = CAN_RTR_DATA;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
	TxHeader->DLC = 8;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2208      	movs	r2, #8
 8001478:	611a      	str	r2, [r3, #16]
	return 1;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <CAN_Starter>:

int CAN_Starter(CAN_HandleTypeDef* hcan,CAN_FilterTypeDef* canfilterconfig){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_ConfigFilter(hcan, canfilterconfig) != HAL_OK){		// attempting to register can filter
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fe05 	bl	80020a4 <HAL_CAN_ConfigFilter>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <CAN_Starter+0x1c>
			Error_Handler();
 80014a0:	f000 f8a0 	bl	80015e4 <Error_Handler>
		}
		if (HAL_CAN_Start(hcan) != HAL_OK){		// attempting to start CAN
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fedd 	bl	8002264 <HAL_CAN_Start>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <CAN_Starter+0x2c>
			Error_Handler();
 80014b0:	f000 f898 	bl	80015e4 <Error_Handler>
		}
		if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){	// attempting to enable CAN interrupts.
 80014b4:	2102      	movs	r1, #2
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 f93a 	bl	8002730 <HAL_CAN_ActivateNotification>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <CAN_Starter+0x3e>
			Error_Handler();								// CAN1_RX0_IRQHandler() is called when an interrupt is triggered
 80014c2:	f000 f88f 	bl	80015e4 <Error_Handler>
		}
	return 1;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <CTRL_Reg_Set>:

void CTRL_Reg_Set(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	uint16_t TX = 0x0000;
 80014d6:	2300      	movs	r3, #0
 80014d8:	80fb      	strh	r3, [r7, #6]
	TX += (0x03 << 10); // 850 ns dead time
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80014e0:	80fb      	strh	r3, [r7, #6]
	TX += (0x03 << 8); // Gain of 40
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80014e8:	80fb      	strh	r3, [r7, #6]
	TX += (((int)sqrt(stepper_step_denominator)) << 3); // 1/4 step
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <CTRL_Reg_Set+0x64>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ffcc 	bl	800048c <__aeabi_ui2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	ec43 2b10 	vmov	d0, r2, r3
 80014fc:	f004 fdbc 	bl	8006078 <sqrt>
 8001500:	ec53 2b10 	vmov	r2, r3, d0
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff faea 	bl	8000ae0 <__aeabi_d2iz>
 800150c:	4603      	mov	r3, r0
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	b29a      	uxth	r2, r3
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	4413      	add	r3, r2
 8001516:	80fb      	strh	r3, [r7, #6]
	TX += 0x01 ; // Enable motor
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	3301      	adds	r3, #1
 800151c:	80fb      	strh	r3, [r7, #6]
	RegAccess(WRITE, 0x00, TX); // write CTRL Register (Address = 0x00)
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	461a      	mov	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	2000      	movs	r0, #0
 8001526:	f000 f81d 	bl	8001564 <RegAccess>
	return;
 800152a:	bf00      	nop
}
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000

08001538 <TORQUE_Reg_Set>:

void TORQUE_Reg_Set(){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	uint16_t TX = 0x0000;
 800153e:	2300      	movs	r3, #0
 8001540:	80fb      	strh	r3, [r7, #6]
	TX += (0x01 << 8); // sample time = 100 us
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001548:	80fb      	strh	r3, [r7, #6]
	TX += 0x01; // Torque = 0x3F
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	3301      	adds	r3, #1
 800154e:	80fb      	strh	r3, [r7, #6]
//	TX = 0b0001000100000001;
	RegAccess(WRITE, 0x01, TX); // write TORQUE Register (Address = 0x01)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	461a      	mov	r2, r3
 8001554:	2101      	movs	r1, #1
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f804 	bl	8001564 <RegAccess>
	return;
 800155c:	bf00      	nop
}
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <RegAccess>:
}



uint16_t RegAccess(uint8_t operation, uint8_t address, uint16_t value)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af02      	add	r7, sp, #8
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	460b      	mov	r3, r1
 8001570:	71bb      	strb	r3, [r7, #6]
 8001572:	4613      	mov	r3, r2
 8001574:	80bb      	strh	r3, [r7, #4]
  uint16_t parcel = value;
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	81fb      	strh	r3, [r7, #14]

  parcel += (address << 12); // register address
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	b29b      	uxth	r3, r3
 800157e:	031b      	lsls	r3, r3, #12
 8001580:	b29a      	uxth	r2, r3
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	4413      	add	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	81fb      	strh	r3, [r7, #14]
  parcel += (operation << 15); // read-write operation choice
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	b29b      	uxth	r3, r3
 800158e:	03db      	lsls	r3, r3, #15
 8001590:	b29a      	uxth	r2, r3
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	81fb      	strh	r3, [r7, #14]

  uint16_t received = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	81bb      	strh	r3, [r7, #12]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2110      	movs	r1, #16
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <RegAccess+0x78>)
 80015a4:	f001 fdca 	bl	800313c <HAL_GPIO_WritePin>
 // HAL_Delay(1);
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&parcel, (uint8_t*)&received, 1, 1000);
 80015a8:	f107 020c 	add.w	r2, r7, #12
 80015ac:	f107 010e 	add.w	r1, r7, #14
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <RegAccess+0x7c>)
 80015ba:	f003 fbe6 	bl	8004d8a <HAL_SPI_TransmitReceive>
 // HAL_Delay(1);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <RegAccess+0x78>)
 80015c4:	f001 fdba 	bl	800313c <HAL_GPIO_WritePin>
 // HAL_Delay(1);
  received &= ~0xF000; // clear upper 4 bits, leave lower 12 bits
 80015c8:	89bb      	ldrh	r3, [r7, #12]
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	81bb      	strh	r3, [r7, #12]

  return received;
 80015d2:	89bb      	ldrh	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020000 	.word	0x40020000
 80015e0:	20000110 	.word	0x20000110

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_CAN_MspInit+0x94>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d134      	bne.n	80016cc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_CAN_MspInit+0x98>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_CAN_MspInit+0x98>)
 800166c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_CAN_MspInit+0x98>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_CAN_MspInit+0x98>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_CAN_MspInit+0x98>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_CAN_MspInit+0x98>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800169a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016ac:	2309      	movs	r3, #9
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <HAL_CAN_MspInit+0x9c>)
 80016b8:	f001 fbac 	bl	8002e14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2014      	movs	r0, #20
 80016c2:	f001 fb70 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016c6:	2014      	movs	r0, #20
 80016c8:	f001 fb89 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40006400 	.word	0x40006400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_I2C_MspInit+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_I2C_MspInit+0x88>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001722:	2312      	movs	r3, #18
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172e:	2304      	movs	r3, #4
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <HAL_I2C_MspInit+0x8c>)
 800173a:	f001 fb6b 	bl	8002e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_I2C_MspInit+0x88>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40005400 	.word	0x40005400
 8001768:	40023800 	.word	0x40023800
 800176c:	40020400 	.word	0x40020400

08001770 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_SPI_MspInit+0x84>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12b      	bne.n	80017ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_SPI_MspInit+0x88>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_SPI_MspInit+0x88>)
 800179c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_SPI_MspInit+0x88>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_SPI_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_SPI_MspInit+0x88>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_SPI_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017ca:	23e0      	movs	r3, #224	; 0xe0
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017da:	2305      	movs	r3, #5
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_SPI_MspInit+0x8c>)
 80017e6:	f001 fb15 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40013000 	.word	0x40013000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000

08001800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001820:	d134      	bne.n	800188c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a28      	ldr	r2, [pc, #160]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800185a:	2302      	movs	r3, #2
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186a:	2301      	movs	r3, #1
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4816      	ldr	r0, [pc, #88]	; (80018d0 <HAL_TIM_Base_MspInit+0xd0>)
 8001876:	f001 facd 	bl	8002e14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	201c      	movs	r0, #28
 8001880:	f001 fa91 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001884:	201c      	movs	r0, #28
 8001886:	f001 faaa 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800188a:	e01a      	b.n	80018c2 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM7)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_TIM_Base_MspInit+0xd4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d115      	bne.n	80018c2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_TIM_Base_MspInit+0xcc>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2037      	movs	r0, #55	; 0x37
 80018b8:	f001 fa75 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018bc:	2037      	movs	r0, #55	; 0x37
 80018be:	f001 fa8e 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40001400 	.word	0x40001400

080018d8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <HAL_TIM_OC_MspInit+0x3c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10d      	bne.n	8001906 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_TIM_OC_MspInit+0x40>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_TIM_OC_MspInit+0x40>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_TIM_OC_MspInit+0x40>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40000400 	.word	0x40000400
 8001918:	40023800 	.word	0x40023800

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 fa5c 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);	// reads CAN message
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <CAN1_RX0_IRQHandler+0x24>)
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <CAN1_RX0_IRQHandler+0x28>)
 8001978:	2100      	movs	r1, #0
 800197a:	4808      	ldr	r0, [pc, #32]	; (800199c <CAN1_RX0_IRQHandler+0x2c>)
 800197c:	f000 fdc6 	bl	800250c <HAL_CAN_GetRxMessage>
	My_CAN_Rx_Handler(&RxHeader, RxData);	// My handler function
 8001980:	4904      	ldr	r1, [pc, #16]	; (8001994 <CAN1_RX0_IRQHandler+0x24>)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <CAN1_RX0_IRQHandler+0x28>)
 8001984:	f000 f85c 	bl	8001a40 <My_CAN_Rx_Handler>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <CAN1_RX0_IRQHandler+0x2c>)
 800198a:	f000 fef7 	bl	800277c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000290 	.word	0x20000290
 8001998:	20000298 	.word	0x20000298
 800199c:	20000094 	.word	0x20000094

080019a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM2_IRQHandler+0x10>)
 80019a6:	f003 fd6c 	bl	8005482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000168 	.word	0x20000168

080019b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  angle_rad = read_angle();
 80019b8:	f000 f92c 	bl	8001c14 <read_angle>
 80019bc:	eef0 7a40 	vmov.f32	s15, s0
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <TIM7_IRQHandler+0x68>)
 80019c2:	edc3 7a00 	vstr	s15, [r3]
  // 	convert and send CAN message
  Angle_To_CAN_Data(angle_rad, velocity, goal_status, stall_status, TxData);
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <TIM7_IRQHandler+0x68>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <TIM7_IRQHandler+0x6c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	ee07 3a10 	vmov	s14, r3
 80019d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <TIM7_IRQHandler+0x70>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <TIM7_IRQHandler+0x74>)
 80019de:	7811      	ldrb	r1, [r2, #0]
 80019e0:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <TIM7_IRQHandler+0x78>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	eef0 0a47 	vmov.f32	s1, s14
 80019e8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ec:	f000 f948 	bl	8001c80 <Angle_To_CAN_Data>
  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0){
 80019f0:	480f      	ldr	r0, [pc, #60]	; (8001a30 <TIM7_IRQHandler+0x7c>)
 80019f2:	f000 fd56 	bl	80024a2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00a      	beq.n	8001a12 <TIM7_IRQHandler+0x5e>
  //		flag_tim7++;
  		if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <TIM7_IRQHandler+0x80>)
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <TIM7_IRQHandler+0x78>)
 8001a00:	490d      	ldr	r1, [pc, #52]	; (8001a38 <TIM7_IRQHandler+0x84>)
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <TIM7_IRQHandler+0x7c>)
 8001a04:	f000 fc72 	bl	80022ec <HAL_CAN_AddTxMessage>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <TIM7_IRQHandler+0x5e>
  			Error_Handler();
 8001a0e:	f7ff fde9 	bl	80015e4 <Error_Handler>
  		}
  	}

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a12:	480a      	ldr	r0, [pc, #40]	; (8001a3c <TIM7_IRQHandler+0x88>)
 8001a14:	f003 fd35 	bl	8005482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200002b4 	.word	0x200002b4
 8001a20:	200002c1 	.word	0x200002c1
 8001a24:	200002c2 	.word	0x200002c2
 8001a28:	200002c3 	.word	0x200002c3
 8001a2c:	20000240 	.word	0x20000240
 8001a30:	20000094 	.word	0x20000094
 8001a34:	20000248 	.word	0x20000248
 8001a38:	20000250 	.word	0x20000250
 8001a3c:	200001f8 	.word	0x200001f8

08001a40 <My_CAN_Rx_Handler>:

/* USER CODE BEGIN 1 */
void My_CAN_Rx_Handler( CAN_RxHeaderTypeDef* RxHeader, uint8_t* RxData){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]

	//*TxData = &RxData;
	 for(int i=0; i<sizeof(RxData); i++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e00b      	b.n	8001a68 <My_CAN_Rx_Handler+0x28>
	  {
		TxData[i] = RxData[i];
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	7819      	ldrb	r1, [r3, #0]
 8001a58:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	460a      	mov	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
	 for(int i=0; i<sizeof(RxData); i++)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3301      	adds	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d9f0      	bls.n	8001a50 <My_CAN_Rx_Handler+0x10>
	  }

	 // checks received ID against this device's ID

	 if(RxHeader->StdId == 1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d16e      	bne.n	8001b54 <My_CAN_Rx_Handler+0x114>
	 {
			float* temp_angle = RxData;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	613b      	str	r3, [r7, #16]

			target_angle = *temp_angle;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a41      	ldr	r2, [pc, #260]	; (8001b84 <My_CAN_Rx_Handler+0x144>)
 8001a80:	6013      	str	r3, [r2, #0]

			char* temp = RxData + 4;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3304      	adds	r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]

			target_velocity = *temp;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <My_CAN_Rx_Handler+0x148>)
 8001a8e:	701a      	strb	r2, [r3, #0]

			temp = RxData + 5;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3305      	adds	r3, #5
 8001a94:	60fb      	str	r3, [r7, #12]

			target_effort = *temp;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <My_CAN_Rx_Handler+0x14c>)
 8001a9c:	701a      	strb	r2, [r3, #0]

			goal_status = 0; //possible not usefull
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <My_CAN_Rx_Handler+0x150>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]

			char* temp_char = temp_angle;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	60bb      	str	r3, [r7, #8]

			TxData[0] = *temp_char;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001aae:	701a      	strb	r2, [r3, #0]
			TxData[1] = *++temp_char;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001abc:	705a      	strb	r2, [r3, #1]
			TxData[2] = *++temp_char;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001aca:	709a      	strb	r2, [r3, #2]
			TxData[3] = *++temp_char;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001ad8:	70da      	strb	r2, [r3, #3]
			TxData[4] = 1;
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	711a      	strb	r2, [r3, #4]
			TxData[5] = target_effort;
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <My_CAN_Rx_Handler+0x14c>)
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001ae6:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0;
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	719a      	strb	r2, [r3, #6]
			TxData[7] = target_velocity;
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <My_CAN_Rx_Handler+0x148>)
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001af4:	71da      	strb	r2, [r3, #7]


			if(target_velocity < 127)
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <My_CAN_Rx_Handler+0x148>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b7e      	cmp	r3, #126	; 0x7e
 8001afc:	d805      	bhi.n	8001b0a <My_CAN_Rx_Handler+0xca>
				 {
					 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	4824      	ldr	r0, [pc, #144]	; (8001b94 <My_CAN_Rx_Handler+0x154>)
 8001b04:	f001 fb1a 	bl	800313c <HAL_GPIO_WritePin>
 8001b08:	e004      	b.n	8001b14 <My_CAN_Rx_Handler+0xd4>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	4821      	ldr	r0, [pc, #132]	; (8001b94 <My_CAN_Rx_Handler+0x154>)
 8001b10:	f001 fb14 	bl	800313c <HAL_GPIO_WritePin>
				 }
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b14:	2140      	movs	r1, #64	; 0x40
 8001b16:	4820      	ldr	r0, [pc, #128]	; (8001b98 <My_CAN_Rx_Handler+0x158>)
 8001b18:	f001 fb29 	bl	800316e <HAL_GPIO_TogglePin>
			for(int i=0;i<1000000;i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	e002      	b.n	8001b28 <My_CAN_Rx_Handler+0xe8>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <My_CAN_Rx_Handler+0x15c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	ddf8      	ble.n	8001b22 <My_CAN_Rx_Handler+0xe2>
			{}
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4819      	ldr	r0, [pc, #100]	; (8001b98 <My_CAN_Rx_Handler+0x158>)
 8001b34:	f001 fb1b 	bl	800316e <HAL_GPIO_TogglePin>
			for(int i=0;i<1000000;i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e002      	b.n	8001b44 <My_CAN_Rx_Handler+0x104>
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <My_CAN_Rx_Handler+0x15c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	ddf8      	ble.n	8001b3e <My_CAN_Rx_Handler+0xfe>
			{}
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b4c:	2140      	movs	r1, #64	; 0x40
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <My_CAN_Rx_Handler+0x158>)
 8001b50:	f001 fb0d 	bl	800316e <HAL_GPIO_TogglePin>
	 }

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0){
 8001b54:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <My_CAN_Rx_Handler+0x160>)
 8001b56:	f000 fca4 	bl	80024a2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <My_CAN_Rx_Handler+0x138>
		if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <My_CAN_Rx_Handler+0x164>)
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <My_CAN_Rx_Handler+0x140>)
 8001b64:	4910      	ldr	r1, [pc, #64]	; (8001ba8 <My_CAN_Rx_Handler+0x168>)
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <My_CAN_Rx_Handler+0x160>)
 8001b68:	f000 fbc0 	bl	80022ec <HAL_CAN_AddTxMessage>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <My_CAN_Rx_Handler+0x138>
			Error_Handler();
 8001b72:	f7ff fd37 	bl	80015e4 <Error_Handler>
		}
	}
	return;
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
}
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000240 	.word	0x20000240
 8001b84:	200002bc 	.word	0x200002bc
 8001b88:	200002b8 	.word	0x200002b8
 8001b8c:	200002c0 	.word	0x200002c0
 8001b90:	200002c2 	.word	0x200002c2
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	000f423f 	.word	0x000f423f
 8001ba0:	20000094 	.word	0x20000094
 8001ba4:	20000248 	.word	0x20000248
 8001ba8:	20000250 	.word	0x20000250
 8001bac:	00000000 	.word	0x00000000

08001bb0 <Ticks_To_Angle>:

float Ticks_To_Angle(int ticks){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	return  (ticks)* M_PI * 2.0  / 4096.0;
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7fe fc77 	bl	80004ac <__aeabi_i2d>
 8001bbe:	a313      	add	r3, pc, #76	; (adr r3, 8001c0c <Ticks_To_Angle+0x5c>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fcdc 	bl	8000580 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f7fe fb1e 	bl	8000214 <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <Ticks_To_Angle+0x58>)
 8001be6:	f7fe fdf5 	bl	80007d4 <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ff9d 	bl	8000b30 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	ee07 3a90 	vmov	s15, r3
}
 8001bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40b00000 	.word	0x40b00000
 8001c0c:	54442d18 	.word	0x54442d18
 8001c10:	400921fb 	.word	0x400921fb

08001c14 <read_angle>:

float read_angle(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[12];	// temporaty buffer for i2c message transmition
	uint8_t buf_recv[12];	// temporaty buffer for i2c message reception
	buf[0] = 0x0E;
 8001c1a:	230e      	movs	r3, #14
 8001c1c:	743b      	strb	r3, [r7, #16]
	ret = HAL_I2C_Master_Transmit(&hi2c1, (0b0110110 << 1) , buf, 1, HAL_MAX_DELAY);
 8001c1e:	f107 0210 	add.w	r2, r7, #16
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	216c      	movs	r1, #108	; 0x6c
 8001c2c:	4812      	ldr	r0, [pc, #72]	; (8001c78 <read_angle+0x64>)
 8001c2e:	f001 fbfd 	bl	800342c <HAL_I2C_Master_Transmit>
 8001c32:	4603      	mov	r3, r0
 8001c34:	77fb      	strb	r3, [r7, #31]
	if(ret == HAL_OK ){
//		flag ++;
	}
	ret = HAL_I2C_Master_Receive(&hi2c1, 0b0110110 << 1, buf_recv, 2, HAL_MAX_DELAY);
 8001c36:	1d3a      	adds	r2, r7, #4
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2302      	movs	r3, #2
 8001c40:	216c      	movs	r1, #108	; 0x6c
 8001c42:	480d      	ldr	r0, [pc, #52]	; (8001c78 <read_angle+0x64>)
 8001c44:	f001 fcf0 	bl	8003628 <HAL_I2C_Master_Receive>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	77fb      	strb	r3, [r7, #31]
	if(ret == HAL_OK ){
//		flag --;
	}
	angle_rad = Ticks_To_Angle(buf_recv[1] + buf_recv[0] * 256);
 8001c4c:	797b      	ldrb	r3, [r7, #5]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	793b      	ldrb	r3, [r7, #4]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	4413      	add	r3, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffaa 	bl	8001bb0 <Ticks_To_Angle>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <read_angle+0x68>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
	return angle_rad;
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <read_angle+0x68>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	ee07 3a90 	vmov	s15, r3
}
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200000bc 	.word	0x200000bc
 8001c7c:	200002b4 	.word	0x200002b4

08001c80 <Angle_To_CAN_Data>:

void Angle_To_CAN_Data(float angle, float speed, char goal_status, char stall_status ,uint8_t* TxData){
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c8e:	4603      	mov	r3, r0
 8001c90:	603a      	str	r2, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	460b      	mov	r3, r1
 8001c96:	71bb      	strb	r3, [r7, #6]
	// pack angle
		__fp16 temp_float16 = angle;
 8001c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9c:	eef3 7a67 	vcvtb.f16.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	827b      	strh	r3, [r7, #18]
		char* temp_char = &temp_float16;
 8001ca6:	f107 0312 	add.w	r3, r7, #18
 8001caa:	617b      	str	r3, [r7, #20]
		TxData[0] = temp_char[0];
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	701a      	strb	r2, [r3, #0]
		TxData[1] = temp_char[1];
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	701a      	strb	r2, [r3, #0]
		//pack velocity
		temp_float16 = speed;
 8001cc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc4:	eef3 7a67 	vcvtb.f16.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	827b      	strh	r3, [r7, #18]
		temp_char = &temp_float16;
 8001cce:	f107 0312 	add.w	r3, r7, #18
 8001cd2:	617b      	str	r3, [r7, #20]
		TxData[2] = temp_char[2];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	1c9a      	adds	r2, r3, #2
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	701a      	strb	r2, [r3, #0]
		TxData[3] = temp_char[3];
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	1cda      	adds	r2, r3, #3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3303      	adds	r3, #3
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	701a      	strb	r2, [r3, #0]
		//pack goal_status. 0 if goal not reached, 1 if it is reached.
		TxData[4] = goal_status;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	701a      	strb	r2, [r3, #0]
		//pack stall_status. 0 if the motor has not stalled, 1 if it has.
		TxData[5] = stall_status;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3305      	adds	r3, #5
 8001cf8:	79ba      	ldrb	r2, [r7, #6]
 8001cfa:	701a      	strb	r2, [r3, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d48:	4c0b      	ldr	r4, [pc, #44]	; (8001d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d56:	f7ff ffd7 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f004 f961 	bl	8006020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7ff f8b9 	bl	8000ed4 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d70:	08006274 	.word	0x08006274
  ldr r2, =_sbss
 8001d74:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d78:	200002c8 	.word	0x200002c8

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_Init+0x40>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_Init+0x40>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_Init+0x40>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 fff1 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fc1c 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 f809 	bl	8002dfa <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 ffd1 	bl	8002da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	200002c4 	.word	0x200002c4

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200002c4 	.word	0x200002c4

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0ed      	b.n	800209a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fbb8 	bl	8001640 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee0:	f7ff ffb4 	bl	8001e4c <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ee6:	e012      	b.n	8001f0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ee8:	f7ff ffb0 	bl	8001e4c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b0a      	cmp	r3, #10
 8001ef4:	d90b      	bls.n	8001f0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2205      	movs	r2, #5
 8001f06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0c5      	b.n	800209a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0e5      	beq.n	8001ee8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0202 	bic.w	r2, r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2c:	f7ff ff8e 	bl	8001e4c <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f32:	e012      	b.n	8001f5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f34:	f7ff ff8a 	bl	8001e4c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b0a      	cmp	r3, #10
 8001f40:	d90b      	bls.n	8001f5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e09f      	b.n	800209a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e5      	bne.n	8001f34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7e1b      	ldrb	r3, [r3, #24]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d108      	bne.n	8001f82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e007      	b.n	8001f92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7e5b      	ldrb	r3, [r3, #25]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d108      	bne.n	8001fac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e007      	b.n	8001fbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7e9b      	ldrb	r3, [r3, #26]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d108      	bne.n	8001fd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0220 	orr.w	r2, r2, #32
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e007      	b.n	8001fe6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0220 	bic.w	r2, r2, #32
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7edb      	ldrb	r3, [r3, #27]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0210 	bic.w	r2, r2, #16
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e007      	b.n	8002010 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0210 	orr.w	r2, r2, #16
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7f1b      	ldrb	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d108      	bne.n	800202a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0208 	orr.w	r2, r2, #8
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e007      	b.n	800203a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0208 	bic.w	r2, r2, #8
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7f5b      	ldrb	r3, [r3, #29]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d108      	bne.n	8002054 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0204 	orr.w	r2, r2, #4
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e007      	b.n	8002064 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	ea42 0103 	orr.w	r1, r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	1e5a      	subs	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d003      	beq.n	80020ca <HAL_CAN_ConfigFilter+0x26>
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	f040 80be 	bne.w	8002246 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80020ca:	4b65      	ldr	r3, [pc, #404]	; (8002260 <HAL_CAN_ConfigFilter+0x1bc>)
 80020cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	431a      	orrs	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2201      	movs	r2, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43db      	mvns	r3, r3
 800211c:	401a      	ands	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d123      	bne.n	8002174 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800214e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3248      	adds	r2, #72	; 0x48
 8002154:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002168:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	3348      	adds	r3, #72	; 0x48
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d122      	bne.n	80021c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800219c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3248      	adds	r2, #72	; 0x48
 80021a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021b8:	6979      	ldr	r1, [r7, #20]
 80021ba:	3348      	adds	r3, #72	; 0x48
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	401a      	ands	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80021dc:	e007      	b.n	80021ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	401a      	ands	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002208:	e007      	b.n	800221a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	431a      	orrs	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	431a      	orrs	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002238:	f023 0201 	bic.w	r2, r3, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e006      	b.n	8002254 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
  }
}
 8002254:	4618      	mov	r0, r3
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40006400 	.word	0x40006400

08002264 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d12e      	bne.n	80022d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002290:	f7ff fddc 	bl	8001e4c <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002296:	e012      	b.n	80022be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002298:	f7ff fdd8 	bl	8001e4c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b0a      	cmp	r3, #10
 80022a4:	d90b      	bls.n	80022be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2205      	movs	r2, #5
 80022b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e012      	b.n	80022e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e5      	bne.n	8002298 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e006      	b.n	80022e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002300:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800230a:	7ffb      	ldrb	r3, [r7, #31]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d003      	beq.n	8002318 <HAL_CAN_AddTxMessage+0x2c>
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	2b02      	cmp	r3, #2
 8002314:	f040 80b8 	bne.w	8002488 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10a      	bne.n	8002338 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80a0 	beq.w	8002478 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	0e1b      	lsrs	r3, r3, #24
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d907      	bls.n	8002358 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e09e      	b.n	8002496 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002358:	2201      	movs	r2, #1
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	409a      	lsls	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	6809      	ldr	r1, [r1, #0]
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3318      	adds	r3, #24
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e00f      	b.n	80023a6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002390:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002396:	68f9      	ldr	r1, [r7, #12]
 8002398:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800239a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3318      	adds	r3, #24
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	440b      	add	r3, r1
 80023a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3318      	adds	r3, #24
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	440b      	add	r3, r1
 80023b6:	3304      	adds	r3, #4
 80023b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	7d1b      	ldrb	r3, [r3, #20]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d111      	bne.n	80023e6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3318      	adds	r3, #24
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6811      	ldr	r1, [r2, #0]
 80023d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3318      	adds	r3, #24
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	440b      	add	r3, r1
 80023e2:	3304      	adds	r3, #4
 80023e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3307      	adds	r3, #7
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	061a      	lsls	r2, r3, #24
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3306      	adds	r3, #6
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3305      	adds	r3, #5
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	3204      	adds	r2, #4
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	4610      	mov	r0, r2
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	6811      	ldr	r1, [r2, #0]
 800240e:	ea43 0200 	orr.w	r2, r3, r0
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	440b      	add	r3, r1
 8002418:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800241c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3303      	adds	r3, #3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	061a      	lsls	r2, r3, #24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3302      	adds	r3, #2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4313      	orrs	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	4610      	mov	r0, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6811      	ldr	r1, [r2, #0]
 8002444:	ea43 0200 	orr.w	r2, r3, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	440b      	add	r3, r1
 800244e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002452:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3318      	adds	r3, #24
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	4413      	add	r3, r2
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6811      	ldr	r1, [r2, #0]
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3318      	adds	r3, #24
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	440b      	add	r3, r1
 8002472:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e00e      	b.n	8002496 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e006      	b.n	8002496 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d002      	beq.n	80024c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d11d      	bne.n	80024fe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3301      	adds	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002520:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d003      	beq.n	8002530 <HAL_CAN_GetRxMessage+0x24>
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b02      	cmp	r3, #2
 800252c:	f040 80f3 	bne.w	8002716 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10e      	bne.n	8002554 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d116      	bne.n	8002572 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0e7      	b.n	8002724 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0d8      	b.n	8002724 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	331b      	adds	r3, #27
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0204 	and.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	331b      	adds	r3, #27
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0d5b      	lsrs	r3, r3, #21
 80025a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e00b      	b.n	80025c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	331b      	adds	r3, #27
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4413      	add	r3, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	331b      	adds	r3, #27
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0202 	and.w	r2, r3, #2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	331b      	adds	r3, #27
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	331b      	adds	r3, #27
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	4413      	add	r3, r2
 80025fc:	3304      	adds	r3, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b2da      	uxtb	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	331b      	adds	r3, #27
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0a1a      	lsrs	r2, r3, #8
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0c1a      	lsrs	r2, r3, #16
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	3302      	adds	r3, #2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e1a      	lsrs	r2, r3, #24
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3303      	adds	r3, #3
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4413      	add	r3, r2
 800268e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3304      	adds	r3, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0a1a      	lsrs	r2, r3, #8
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3305      	adds	r3, #5
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4413      	add	r3, r2
 80026c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0c1a      	lsrs	r2, r3, #16
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3306      	adds	r3, #6
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e1a      	lsrs	r2, r3, #24
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3307      	adds	r3, #7
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d108      	bne.n	8002702 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0220 	orr.w	r2, r2, #32
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	e007      	b.n	8002712 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0220 	orr.w	r2, r2, #32
 8002710:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e006      	b.n	8002724 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002740:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <HAL_CAN_ActivateNotification+0x1e>
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d109      	bne.n	8002762 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6959      	ldr	r1, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e006      	b.n	8002770 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d07c      	beq.n	80028bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f983 	bl	8002aea <HAL_CAN_TxMailbox0CompleteCallback>
 80027e4:	e016      	b.n	8002814 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e00c      	b.n	8002814 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	e002      	b.n	8002814 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f989 	bl	8002b26 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d024      	beq.n	8002868 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002826:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f963 	bl	8002afe <HAL_CAN_TxMailbox1CompleteCallback>
 8002838:	e016      	b.n	8002868 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	e00c      	b.n	8002868 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
 8002860:	e002      	b.n	8002868 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f969 	bl	8002b3a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d024      	beq.n	80028bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800287a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f943 	bl	8002b12 <HAL_CAN_TxMailbox2CompleteCallback>
 800288c:	e016      	b.n	80028bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	e00c      	b.n	80028bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	e002      	b.n	80028bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f949 	bl	8002b4e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2210      	movs	r2, #16
 80028de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2208      	movs	r2, #8
 80028fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f93a 	bl	8002b76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f921 	bl	8002b62 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800293a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2210      	movs	r2, #16
 8002942:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f91c 	bl	8002b9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f903 	bl	8002b8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2210      	movs	r2, #16
 800299e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f906 	bl	8002bb2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2208      	movs	r2, #8
 80029c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f8ff 	bl	8002bc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d07b      	beq.n	8002aca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d072      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d043      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d03e      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a4a:	2b60      	cmp	r3, #96	; 0x60
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x32a>
 8002a4e:	2b60      	cmp	r3, #96	; 0x60
 8002a50:	d82e      	bhi.n	8002ab0 <HAL_CAN_IRQHandler+0x334>
 8002a52:	2b50      	cmp	r3, #80	; 0x50
 8002a54:	d022      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x320>
 8002a56:	2b50      	cmp	r3, #80	; 0x50
 8002a58:	d82a      	bhi.n	8002ab0 <HAL_CAN_IRQHandler+0x334>
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	d019      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x316>
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d826      	bhi.n	8002ab0 <HAL_CAN_IRQHandler+0x334>
 8002a62:	2b30      	cmp	r3, #48	; 0x30
 8002a64:	d010      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x30c>
 8002a66:	2b30      	cmp	r3, #48	; 0x30
 8002a68:	d822      	bhi.n	8002ab0 <HAL_CAN_IRQHandler+0x334>
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d002      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x2f8>
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d005      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a72:	e01d      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a7c:	e019      	b.n	8002ab2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a86:	e014      	b.n	8002ab2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f043 0320 	orr.w	r3, r3, #32
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a90:	e00f      	b.n	8002ab2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a9a:	e00a      	b.n	8002ab2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aa4:	e005      	b.n	8002ab2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aae:	e000      	b.n	8002ab2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ab0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ac0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f87c 	bl	8002bda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	; (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f7ff ff8e 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff29 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff3e 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff8e 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5d 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff31 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffa2 	bl	8002d4c <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e165      	b.n	80030fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 8154 	bne.w	80030f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d005      	beq.n	8002e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d130      	bne.n	8002ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2203      	movs	r2, #3
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0201 	and.w	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d017      	beq.n	8002f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d123      	bne.n	8002f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80ae 	beq.w	80030f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	; (8003114 <HAL_GPIO_Init+0x300>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a5c      	ldr	r2, [pc, #368]	; (8003114 <HAL_GPIO_Init+0x300>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b5a      	ldr	r3, [pc, #360]	; (8003114 <HAL_GPIO_Init+0x300>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb6:	4a58      	ldr	r2, [pc, #352]	; (8003118 <HAL_GPIO_Init+0x304>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4f      	ldr	r2, [pc, #316]	; (800311c <HAL_GPIO_Init+0x308>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d025      	beq.n	800302e <HAL_GPIO_Init+0x21a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4e      	ldr	r2, [pc, #312]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01f      	beq.n	800302a <HAL_GPIO_Init+0x216>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4d      	ldr	r2, [pc, #308]	; (8003124 <HAL_GPIO_Init+0x310>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d019      	beq.n	8003026 <HAL_GPIO_Init+0x212>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4c      	ldr	r2, [pc, #304]	; (8003128 <HAL_GPIO_Init+0x314>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_GPIO_Init+0x20e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_GPIO_Init+0x318>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00d      	beq.n	800301e <HAL_GPIO_Init+0x20a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4a      	ldr	r2, [pc, #296]	; (8003130 <HAL_GPIO_Init+0x31c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <HAL_GPIO_Init+0x206>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a49      	ldr	r2, [pc, #292]	; (8003134 <HAL_GPIO_Init+0x320>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_GPIO_Init+0x202>
 8003012:	2306      	movs	r3, #6
 8003014:	e00c      	b.n	8003030 <HAL_GPIO_Init+0x21c>
 8003016:	2307      	movs	r3, #7
 8003018:	e00a      	b.n	8003030 <HAL_GPIO_Init+0x21c>
 800301a:	2305      	movs	r3, #5
 800301c:	e008      	b.n	8003030 <HAL_GPIO_Init+0x21c>
 800301e:	2304      	movs	r3, #4
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x21c>
 8003022:	2303      	movs	r3, #3
 8003024:	e004      	b.n	8003030 <HAL_GPIO_Init+0x21c>
 8003026:	2302      	movs	r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x21c>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x21c>
 800302e:	2300      	movs	r3, #0
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	f002 0203 	and.w	r2, r2, #3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4093      	lsls	r3, r2
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003040:	4935      	ldr	r1, [pc, #212]	; (8003118 <HAL_GPIO_Init+0x304>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <HAL_GPIO_Init+0x324>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003072:	4a31      	ldr	r2, [pc, #196]	; (8003138 <HAL_GPIO_Init+0x324>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003078:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_GPIO_Init+0x324>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <HAL_GPIO_Init+0x324>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_GPIO_Init+0x324>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_GPIO_Init+0x324>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_GPIO_Init+0x324>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_GPIO_Init+0x324>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	f67f ae96 	bls.w	8002e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40013800 	.word	0x40013800
 800311c:	40020000 	.word	0x40020000
 8003120:	40020400 	.word	0x40020400
 8003124:	40020800 	.word	0x40020800
 8003128:	40020c00 	.word	0x40020c00
 800312c:	40021000 	.word	0x40021000
 8003130:	40021400 	.word	0x40021400
 8003134:	40021800 	.word	0x40021800
 8003138:	40013c00 	.word	0x40013c00

0800313c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
 8003148:	4613      	mov	r3, r2
 800314a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800314c:	787b      	ldrb	r3, [r7, #1]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003158:	e003      	b.n	8003162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	041a      	lsls	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	619a      	str	r2, [r3, #24]
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003180:	887a      	ldrh	r2, [r7, #2]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	041a      	lsls	r2, r3, #16
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	43d9      	mvns	r1, r3
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	400b      	ands	r3, r1
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	619a      	str	r2, [r3, #24]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e12b      	b.n	800340e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fa88 	bl	80016e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003208:	f001 f854 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 800320c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a81      	ldr	r2, [pc, #516]	; (8003418 <HAL_I2C_Init+0x274>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d807      	bhi.n	8003228 <HAL_I2C_Init+0x84>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a80      	ldr	r2, [pc, #512]	; (800341c <HAL_I2C_Init+0x278>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e006      	b.n	8003236 <HAL_I2C_Init+0x92>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a7d      	ldr	r2, [pc, #500]	; (8003420 <HAL_I2C_Init+0x27c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0e7      	b.n	800340e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a78      	ldr	r2, [pc, #480]	; (8003424 <HAL_I2C_Init+0x280>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0c9b      	lsrs	r3, r3, #18
 8003248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_I2C_Init+0x274>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d802      	bhi.n	8003278 <HAL_I2C_Init+0xd4>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3301      	adds	r3, #1
 8003276:	e009      	b.n	800328c <HAL_I2C_Init+0xe8>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	4a69      	ldr	r2, [pc, #420]	; (8003428 <HAL_I2C_Init+0x284>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	3301      	adds	r3, #1
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	430b      	orrs	r3, r1
 8003292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800329e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	495c      	ldr	r1, [pc, #368]	; (8003418 <HAL_I2C_Init+0x274>)
 80032a8:	428b      	cmp	r3, r1
 80032aa:	d819      	bhi.n	80032e0 <HAL_I2C_Init+0x13c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1e59      	subs	r1, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032c0:	400b      	ands	r3, r1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_I2C_Init+0x138>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1e59      	subs	r1, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032da:	e051      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 80032dc:	2304      	movs	r3, #4
 80032de:	e04f      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d111      	bne.n	800330c <HAL_I2C_Init+0x168>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	440b      	add	r3, r1
 80032f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e012      	b.n	8003332 <HAL_I2C_Init+0x18e>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e58      	subs	r0, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	0099      	lsls	r1, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003322:	3301      	adds	r3, #1
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x196>
 8003336:	2301      	movs	r3, #1
 8003338:	e022      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10e      	bne.n	8003360 <HAL_I2C_Init+0x1bc>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1e58      	subs	r0, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	440b      	add	r3, r1
 8003350:	fbb0 f3f3 	udiv	r3, r0, r3
 8003354:	3301      	adds	r3, #1
 8003356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335e:	e00f      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e58      	subs	r0, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	0099      	lsls	r1, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	fbb0 f3f3 	udiv	r3, r0, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	6809      	ldr	r1, [r1, #0]
 8003384:	4313      	orrs	r3, r2
 8003386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6911      	ldr	r1, [r2, #16]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68d2      	ldr	r2, [r2, #12]
 80033ba:	4311      	orrs	r1, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	000186a0 	.word	0x000186a0
 800341c:	001e847f 	.word	0x001e847f
 8003420:	003d08ff 	.word	0x003d08ff
 8003424:	431bde83 	.word	0x431bde83
 8003428:	10624dd3 	.word	0x10624dd3

0800342c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	460b      	mov	r3, r1
 800343a:	817b      	strh	r3, [r7, #10]
 800343c:	4613      	mov	r3, r2
 800343e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003440:	f7fe fd04 	bl	8001e4c <HAL_GetTick>
 8003444:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	f040 80e0 	bne.w	8003614 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	2201      	movs	r2, #1
 800345c:	4970      	ldr	r1, [pc, #448]	; (8003620 <HAL_I2C_Master_Transmit+0x1f4>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fc58 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
 800346c:	e0d3      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_I2C_Master_Transmit+0x50>
 8003478:	2302      	movs	r3, #2
 800347a:	e0cc      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d007      	beq.n	80034a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2221      	movs	r2, #33	; 0x21
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2210      	movs	r2, #16
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	893a      	ldrh	r2, [r7, #8]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a50      	ldr	r2, [pc, #320]	; (8003624 <HAL_I2C_Master_Transmit+0x1f8>)
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034e4:	8979      	ldrh	r1, [r7, #10]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fac2 	bl	8003a74 <I2C_MasterRequestWrite>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e08d      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003510:	e066      	b.n	80035e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6a39      	ldr	r1, [r7, #32]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fcd2 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b04      	cmp	r3, #4
 8003528:	d107      	bne.n	800353a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e06b      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b04      	cmp	r3, #4
 800357a:	d11b      	bne.n	80035b4 <HAL_I2C_Master_Transmit+0x188>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	d017      	beq.n	80035b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	6a39      	ldr	r1, [r7, #32]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fcc2 	bl	8003f42 <I2C_WaitOnBTFFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e01a      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d194      	bne.n	8003512 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000

08003628 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	460b      	mov	r3, r1
 8003636:	817b      	strh	r3, [r7, #10]
 8003638:	4613      	mov	r3, r2
 800363a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7fe fc06 	bl	8001e4c <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b20      	cmp	r3, #32
 800364c:	f040 820b 	bne.w	8003a66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2319      	movs	r3, #25
 8003656:	2201      	movs	r2, #1
 8003658:	497c      	ldr	r1, [pc, #496]	; (800384c <HAL_I2C_Master_Receive+0x224>)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fb5a 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
 8003668:	e1fe      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_I2C_Master_Receive+0x50>
 8003674:	2302      	movs	r3, #2
 8003676:	e1f7      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d007      	beq.n	800369e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2222      	movs	r2, #34	; 0x22
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2210      	movs	r2, #16
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	893a      	ldrh	r2, [r7, #8]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a5c      	ldr	r2, [pc, #368]	; (8003850 <HAL_I2C_Master_Receive+0x228>)
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036e0:	8979      	ldrh	r1, [r7, #10]
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fa46 	bl	8003b78 <I2C_MasterRequestRead>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e1b8      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d113      	bne.n	8003726 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e18c      	b.n	8003a40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	2b01      	cmp	r3, #1
 800372c:	d11b      	bne.n	8003766 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e16c      	b.n	8003a40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	2b02      	cmp	r3, #2
 800376c:	d11b      	bne.n	80037a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	e14c      	b.n	8003a40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037cc:	e138      	b.n	8003a40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	f200 80f1 	bhi.w	80039ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d123      	bne.n	8003828 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fbed 	bl	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e139      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003826:	e10b      	b.n	8003a40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	2b02      	cmp	r3, #2
 800382e:	d14e      	bne.n	80038ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	2200      	movs	r2, #0
 8003838:	4906      	ldr	r1, [pc, #24]	; (8003854 <HAL_I2C_Master_Receive+0x22c>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fa6a 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e10e      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
 800384a:	bf00      	nop
 800384c:	00100002 	.word	0x00100002
 8003850:	ffff0000 	.word	0xffff0000
 8003854:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038cc:	e0b8      	b.n	8003a40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	2200      	movs	r2, #0
 80038d6:	4966      	ldr	r1, [pc, #408]	; (8003a70 <HAL_I2C_Master_Receive+0x448>)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fa1b 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0bf      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2200      	movs	r2, #0
 8003932:	494f      	ldr	r1, [pc, #316]	; (8003a70 <HAL_I2C_Master_Receive+0x448>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f9ed 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e091      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b8:	e042      	b.n	8003a40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fb00 	bl	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e04c      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d118      	bne.n	8003a40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f aec2 	bne.w	80037ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	00010004 	.word	0x00010004

08003a74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	460b      	mov	r3, r1
 8003a82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d006      	beq.n	8003a9e <I2C_MasterRequestWrite+0x2a>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d003      	beq.n	8003a9e <I2C_MasterRequestWrite+0x2a>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a9c:	d108      	bne.n	8003ab0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e00b      	b.n	8003ac8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	2b12      	cmp	r3, #18
 8003ab6:	d107      	bne.n	8003ac8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f91d 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aee:	d103      	bne.n	8003af8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e035      	b.n	8003b68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b04:	d108      	bne.n	8003b18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b14:	611a      	str	r2, [r3, #16]
 8003b16:	e01b      	b.n	8003b50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b18:	897b      	ldrh	r3, [r7, #10]
 8003b1a:	11db      	asrs	r3, r3, #7
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 0306 	and.w	r3, r3, #6
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f063 030f 	orn	r3, r3, #15
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	490e      	ldr	r1, [pc, #56]	; (8003b70 <I2C_MasterRequestWrite+0xfc>)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f943 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e010      	b.n	8003b68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4907      	ldr	r1, [pc, #28]	; (8003b74 <I2C_MasterRequestWrite+0x100>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f933 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	00010008 	.word	0x00010008
 8003b74:	00010002 	.word	0x00010002

08003b78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	460b      	mov	r3, r1
 8003b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d006      	beq.n	8003bb2 <I2C_MasterRequestRead+0x3a>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d003      	beq.n	8003bb2 <I2C_MasterRequestRead+0x3a>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bb0:	d108      	bne.n	8003bc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00b      	b.n	8003bdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	2b11      	cmp	r3, #17
 8003bca:	d107      	bne.n	8003bdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f893 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c02:	d103      	bne.n	8003c0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e079      	b.n	8003d04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c18:	d108      	bne.n	8003c2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	e05f      	b.n	8003cec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	11db      	asrs	r3, r3, #7
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0306 	and.w	r3, r3, #6
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f063 030f 	orn	r3, r3, #15
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4930      	ldr	r1, [pc, #192]	; (8003d0c <I2C_MasterRequestRead+0x194>)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f8b9 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e054      	b.n	8003d04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c5a:	897b      	ldrh	r3, [r7, #10]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4929      	ldr	r1, [pc, #164]	; (8003d10 <I2C_MasterRequestRead+0x198>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f8a9 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e044      	b.n	8003d04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f831 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	d103      	bne.n	8003cd0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e017      	b.n	8003d04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003cd4:	897b      	ldrh	r3, [r7, #10]
 8003cd6:	11db      	asrs	r3, r3, #7
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f003 0306 	and.w	r3, r3, #6
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f063 030e 	orn	r3, r3, #14
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4907      	ldr	r1, [pc, #28]	; (8003d10 <I2C_MasterRequestRead+0x198>)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f865 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	00010008 	.word	0x00010008
 8003d10:	00010002 	.word	0x00010002

08003d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d24:	e025      	b.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d021      	beq.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe f88d 	bl	8001e4c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e023      	b.n	8003dba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10d      	bne.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	e00c      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d0b6      	beq.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd0:	e051      	b.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d123      	bne.n	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e046      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d021      	beq.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe f80b 	bl	8001e4c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e020      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10c      	bne.n	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	e00b      	b.n	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d18d      	bne.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8ce 	bl	8004070 <I2C_IsAcknowledgeFailed>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e02d      	b.n	8003f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d021      	beq.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fd ffb1 	bl	8001e4c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e007      	b.n	8003f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d1ca      	bne.n	8003ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f4e:	e02d      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f88d 	bl	8004070 <I2C_IsAcknowledgeFailed>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e02d      	b.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d021      	beq.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f68:	f7fd ff70 	bl	8001e4c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d116      	bne.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e007      	b.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d1ca      	bne.n	8003f50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd0:	e042      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d119      	bne.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0210 	mvn.w	r2, #16
 8003fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e029      	b.n	8004068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004014:	f7fd ff1a 	bl	8001e4c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d1b5      	bne.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d11b      	bne.n	80040c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004090:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0cc      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90c      	bls.n	800410c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b8      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	494d      	ldr	r1, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d044      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d119      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d003      	beq.n	800418e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e067      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c0:	f7fd fe44 	bl	8001e4c <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fd fe40 	bl	8001e4c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d20c      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e032      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	490e      	ldr	r1, [pc, #56]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004256:	f000 f841 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 800425a:	4602      	mov	r2, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	490a      	ldr	r1, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	5ccb      	ldrb	r3, [r1, r3]
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fda4 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023c00 	.word	0x40023c00
 800428c:	40023800 	.word	0x40023800
 8004290:	0800624c 	.word	0x0800624c
 8004294:	20000004 	.word	0x20000004
 8004298:	20000008 	.word	0x20000008

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000004 	.word	0x20000004

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	0800625c 	.word	0x0800625c

080042dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e0:	b0ae      	sub	sp, #184	; 0xb8
 80042e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004302:	4bcb      	ldr	r3, [pc, #812]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b0c      	cmp	r3, #12
 800430c:	f200 8206 	bhi.w	800471c <HAL_RCC_GetSysClockFreq+0x440>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800434d 	.word	0x0800434d
 800431c:	0800471d 	.word	0x0800471d
 8004320:	0800471d 	.word	0x0800471d
 8004324:	0800471d 	.word	0x0800471d
 8004328:	08004355 	.word	0x08004355
 800432c:	0800471d 	.word	0x0800471d
 8004330:	0800471d 	.word	0x0800471d
 8004334:	0800471d 	.word	0x0800471d
 8004338:	0800435d 	.word	0x0800435d
 800433c:	0800471d 	.word	0x0800471d
 8004340:	0800471d 	.word	0x0800471d
 8004344:	0800471d 	.word	0x0800471d
 8004348:	0800454d 	.word	0x0800454d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4bb9      	ldr	r3, [pc, #740]	; (8004634 <HAL_RCC_GetSysClockFreq+0x358>)
 800434e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004352:	e1e7      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004354:	4bb8      	ldr	r3, [pc, #736]	; (8004638 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800435a:	e1e3      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800435c:	4bb4      	ldr	r3, [pc, #720]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004368:	4bb1      	ldr	r3, [pc, #708]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d071      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004374:	4bae      	ldr	r3, [pc, #696]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004380:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800439a:	4622      	mov	r2, r4
 800439c:	462b      	mov	r3, r5
 800439e:	f04f 0000 	mov.w	r0, #0
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	0159      	lsls	r1, r3, #5
 80043a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ac:	0150      	lsls	r0, r2, #5
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4621      	mov	r1, r4
 80043b4:	1a51      	subs	r1, r2, r1
 80043b6:	6439      	str	r1, [r7, #64]	; 0x40
 80043b8:	4629      	mov	r1, r5
 80043ba:	eb63 0301 	sbc.w	r3, r3, r1
 80043be:	647b      	str	r3, [r7, #68]	; 0x44
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80043cc:	4649      	mov	r1, r9
 80043ce:	018b      	lsls	r3, r1, #6
 80043d0:	4641      	mov	r1, r8
 80043d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043d6:	4641      	mov	r1, r8
 80043d8:	018a      	lsls	r2, r1, #6
 80043da:	4641      	mov	r1, r8
 80043dc:	1a51      	subs	r1, r2, r1
 80043de:	63b9      	str	r1, [r7, #56]	; 0x38
 80043e0:	4649      	mov	r1, r9
 80043e2:	eb63 0301 	sbc.w	r3, r3, r1
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80043f4:	4649      	mov	r1, r9
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4641      	mov	r1, r8
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4641      	mov	r1, r8
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4622      	mov	r2, r4
 800440a:	189b      	adds	r3, r3, r2
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
 800440e:	462b      	mov	r3, r5
 8004410:	460a      	mov	r2, r1
 8004412:	eb42 0303 	adc.w	r3, r2, r3
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004424:	4629      	mov	r1, r5
 8004426:	024b      	lsls	r3, r1, #9
 8004428:	4621      	mov	r1, r4
 800442a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800442e:	4621      	mov	r1, r4
 8004430:	024a      	lsls	r2, r1, #9
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004440:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004444:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004448:	f7fc fbc2 	bl	8000bd0 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004456:	e067      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004458:	4b75      	ldr	r3, [pc, #468]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004464:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800446c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004470:	67bb      	str	r3, [r7, #120]	; 0x78
 8004472:	2300      	movs	r3, #0
 8004474:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004476:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800447a:	4622      	mov	r2, r4
 800447c:	462b      	mov	r3, r5
 800447e:	f04f 0000 	mov.w	r0, #0
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	0159      	lsls	r1, r3, #5
 8004488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448c:	0150      	lsls	r0, r2, #5
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4621      	mov	r1, r4
 8004494:	1a51      	subs	r1, r2, r1
 8004496:	62b9      	str	r1, [r7, #40]	; 0x28
 8004498:	4629      	mov	r1, r5
 800449a:	eb63 0301 	sbc.w	r3, r3, r1
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80044ac:	4649      	mov	r1, r9
 80044ae:	018b      	lsls	r3, r1, #6
 80044b0:	4641      	mov	r1, r8
 80044b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044b6:	4641      	mov	r1, r8
 80044b8:	018a      	lsls	r2, r1, #6
 80044ba:	4641      	mov	r1, r8
 80044bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80044c0:	4649      	mov	r1, r9
 80044c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044da:	4692      	mov	sl, r2
 80044dc:	469b      	mov	fp, r3
 80044de:	4623      	mov	r3, r4
 80044e0:	eb1a 0303 	adds.w	r3, sl, r3
 80044e4:	623b      	str	r3, [r7, #32]
 80044e6:	462b      	mov	r3, r5
 80044e8:	eb4b 0303 	adc.w	r3, fp, r3
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044fa:	4629      	mov	r1, r5
 80044fc:	028b      	lsls	r3, r1, #10
 80044fe:	4621      	mov	r1, r4
 8004500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004504:	4621      	mov	r1, r4
 8004506:	028a      	lsls	r2, r1, #10
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004510:	2200      	movs	r2, #0
 8004512:	673b      	str	r3, [r7, #112]	; 0x70
 8004514:	677a      	str	r2, [r7, #116]	; 0x74
 8004516:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800451a:	f7fc fb59 	bl	8000bd0 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4613      	mov	r3, r2
 8004524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004528:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800453a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800453e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800454a:	e0eb      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b38      	ldr	r3, [pc, #224]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004558:	4b35      	ldr	r3, [pc, #212]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d06b      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <HAL_RCC_GetSysClockFreq+0x354>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	099b      	lsrs	r3, r3, #6
 800456a:	2200      	movs	r2, #0
 800456c:	66bb      	str	r3, [r7, #104]	; 0x68
 800456e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	663b      	str	r3, [r7, #96]	; 0x60
 8004578:	2300      	movs	r3, #0
 800457a:	667b      	str	r3, [r7, #100]	; 0x64
 800457c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004580:	4622      	mov	r2, r4
 8004582:	462b      	mov	r3, r5
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	0159      	lsls	r1, r3, #5
 800458e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004592:	0150      	lsls	r0, r2, #5
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4621      	mov	r1, r4
 800459a:	1a51      	subs	r1, r2, r1
 800459c:	61b9      	str	r1, [r7, #24]
 800459e:	4629      	mov	r1, r5
 80045a0:	eb63 0301 	sbc.w	r3, r3, r1
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045b2:	4659      	mov	r1, fp
 80045b4:	018b      	lsls	r3, r1, #6
 80045b6:	4651      	mov	r1, sl
 80045b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045bc:	4651      	mov	r1, sl
 80045be:	018a      	lsls	r2, r1, #6
 80045c0:	4651      	mov	r1, sl
 80045c2:	ebb2 0801 	subs.w	r8, r2, r1
 80045c6:	4659      	mov	r1, fp
 80045c8:	eb63 0901 	sbc.w	r9, r3, r1
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045e0:	4690      	mov	r8, r2
 80045e2:	4699      	mov	r9, r3
 80045e4:	4623      	mov	r3, r4
 80045e6:	eb18 0303 	adds.w	r3, r8, r3
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	462b      	mov	r3, r5
 80045ee:	eb49 0303 	adc.w	r3, r9, r3
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004600:	4629      	mov	r1, r5
 8004602:	024b      	lsls	r3, r1, #9
 8004604:	4621      	mov	r1, r4
 8004606:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800460a:	4621      	mov	r1, r4
 800460c:	024a      	lsls	r2, r1, #9
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004616:	2200      	movs	r2, #0
 8004618:	65bb      	str	r3, [r7, #88]	; 0x58
 800461a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800461c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004620:	f7fc fad6 	bl	8000bd0 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800462e:	e065      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x420>
 8004630:	40023800 	.word	0x40023800
 8004634:	00f42400 	.word	0x00f42400
 8004638:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463c:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_RCC_GetSysClockFreq+0x458>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	2200      	movs	r2, #0
 8004644:	4618      	mov	r0, r3
 8004646:	4611      	mov	r1, r2
 8004648:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800464c:	653b      	str	r3, [r7, #80]	; 0x50
 800464e:	2300      	movs	r3, #0
 8004650:	657b      	str	r3, [r7, #84]	; 0x54
 8004652:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004656:	4642      	mov	r2, r8
 8004658:	464b      	mov	r3, r9
 800465a:	f04f 0000 	mov.w	r0, #0
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	0159      	lsls	r1, r3, #5
 8004664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004668:	0150      	lsls	r0, r2, #5
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4641      	mov	r1, r8
 8004670:	1a51      	subs	r1, r2, r1
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	4649      	mov	r1, r9
 8004676:	eb63 0301 	sbc.w	r3, r3, r1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004688:	4659      	mov	r1, fp
 800468a:	018b      	lsls	r3, r1, #6
 800468c:	4651      	mov	r1, sl
 800468e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004692:	4651      	mov	r1, sl
 8004694:	018a      	lsls	r2, r1, #6
 8004696:	4651      	mov	r1, sl
 8004698:	1a54      	subs	r4, r2, r1
 800469a:	4659      	mov	r1, fp
 800469c:	eb63 0501 	sbc.w	r5, r3, r1
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	00eb      	lsls	r3, r5, #3
 80046aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ae:	00e2      	lsls	r2, r4, #3
 80046b0:	4614      	mov	r4, r2
 80046b2:	461d      	mov	r5, r3
 80046b4:	4643      	mov	r3, r8
 80046b6:	18e3      	adds	r3, r4, r3
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	464b      	mov	r3, r9
 80046bc:	eb45 0303 	adc.w	r3, r5, r3
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ce:	4629      	mov	r1, r5
 80046d0:	028b      	lsls	r3, r1, #10
 80046d2:	4621      	mov	r1, r4
 80046d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046d8:	4621      	mov	r1, r4
 80046da:	028a      	lsls	r2, r1, #10
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046e4:	2200      	movs	r2, #0
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80046ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046ee:	f7fc fa6f 	bl	8000bd0 <__aeabi_uldivmod>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4613      	mov	r3, r2
 80046f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_RCC_GetSysClockFreq+0x458>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	0f1b      	lsrs	r3, r3, #28
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800470a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800470e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004712:	fbb2 f3f3 	udiv	r3, r2, r3
 8004716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800471a:	e003      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_RCC_GetSysClockFreq+0x45c>)
 800471e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004722:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004728:	4618      	mov	r0, r3
 800472a:	37b8      	adds	r7, #184	; 0xb8
 800472c:	46bd      	mov	sp, r7
 800472e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800
 8004738:	00f42400 	.word	0x00f42400

0800473c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e28d      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8083 	beq.w	8004862 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800475c:	4b94      	ldr	r3, [pc, #592]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 030c 	and.w	r3, r3, #12
 8004764:	2b04      	cmp	r3, #4
 8004766:	d019      	beq.n	800479c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004768:	4b91      	ldr	r3, [pc, #580]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004770:	2b08      	cmp	r3, #8
 8004772:	d106      	bne.n	8004782 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004774:	4b8e      	ldr	r3, [pc, #568]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d00c      	beq.n	800479c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004782:	4b8b      	ldr	r3, [pc, #556]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d112      	bne.n	80047b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478e:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d10b      	bne.n	80047b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	4b84      	ldr	r3, [pc, #528]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05b      	beq.n	8004860 <HAL_RCC_OscConfig+0x124>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d157      	bne.n	8004860 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e25a      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d106      	bne.n	80047cc <HAL_RCC_OscConfig+0x90>
 80047be:	4b7c      	ldr	r3, [pc, #496]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7b      	ldr	r2, [pc, #492]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xcc>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0xb4>
 80047d6:	4b76      	ldr	r3, [pc, #472]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a75      	ldr	r2, [pc, #468]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b73      	ldr	r3, [pc, #460]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a72      	ldr	r2, [pc, #456]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xcc>
 80047f0:	4b6f      	ldr	r3, [pc, #444]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6b      	ldr	r2, [pc, #428]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fd fb1c 	bl	8001e4c <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004818:	f7fd fb18 	bl	8001e4c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e21f      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xdc>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd fb08 	bl	8001e4c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7fd fb04 	bl	8001e4c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e20b      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x104>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d06f      	beq.n	800494e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800486e:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800487a:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004882:	2b08      	cmp	r3, #8
 8004884:	d105      	bne.n	8004892 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d11c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489e:	4b44      	ldr	r3, [pc, #272]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d116      	bne.n	80048d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048aa:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_RCC_OscConfig+0x186>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e1d3      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4937      	ldr	r1, [pc, #220]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d6:	e03a      	b.n	800494e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e0:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <HAL_RCC_OscConfig+0x278>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fd fab1 	bl	8001e4c <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ee:	f7fd faad 	bl	8001e4c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e1b4      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004900:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490c:	4b28      	ldr	r3, [pc, #160]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4925      	ldr	r1, [pc, #148]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800491c:	4313      	orrs	r3, r2
 800491e:	600b      	str	r3, [r1, #0]
 8004920:	e015      	b.n	800494e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_RCC_OscConfig+0x278>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fa90 	bl	8001e4c <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004930:	f7fd fa8c 	bl	8001e4c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e193      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004942:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d036      	beq.n	80049c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <HAL_RCC_OscConfig+0x27c>)
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fd fa70 	bl	8001e4c <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004970:	f7fd fa6c 	bl	8001e4c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e173      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x234>
 800498e:	e01b      	b.n	80049c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_OscConfig+0x27c>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004996:	f7fd fa59 	bl	8001e4c <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	e00e      	b.n	80049bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499e:	f7fd fa55 	bl	8001e4c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d907      	bls.n	80049bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e15c      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
 80049b0:	40023800 	.word	0x40023800
 80049b4:	42470000 	.word	0x42470000
 80049b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	4b8a      	ldr	r3, [pc, #552]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 80049be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1ea      	bne.n	800499e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8097 	beq.w	8004b04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049da:	4b83      	ldr	r3, [pc, #524]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	4b7f      	ldr	r3, [pc, #508]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	4a7e      	ldr	r2, [pc, #504]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6413      	str	r3, [r2, #64]	; 0x40
 80049f6:	4b7c      	ldr	r3, [pc, #496]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a06:	4b79      	ldr	r3, [pc, #484]	; (8004bec <HAL_RCC_OscConfig+0x4b0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d118      	bne.n	8004a44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x4b0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a75      	ldr	r2, [pc, #468]	; (8004bec <HAL_RCC_OscConfig+0x4b0>)
 8004a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1e:	f7fd fa15 	bl	8001e4c <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a26:	f7fd fa11 	bl	8001e4c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e118      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCC_OscConfig+0x4b0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x31e>
 8004a4c:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	4a65      	ldr	r2, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6713      	str	r3, [r2, #112]	; 0x70
 8004a58:	e01c      	b.n	8004a94 <HAL_RCC_OscConfig+0x358>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x340>
 8004a62:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	4a60      	ldr	r2, [pc, #384]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a68:	f043 0304 	orr.w	r3, r3, #4
 8004a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6e:	4b5e      	ldr	r3, [pc, #376]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a5d      	ldr	r2, [pc, #372]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_OscConfig+0x358>
 8004a7c:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a59      	ldr	r2, [pc, #356]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	4b57      	ldr	r3, [pc, #348]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a56      	ldr	r2, [pc, #344]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	f023 0304 	bic.w	r3, r3, #4
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d015      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fd f9d6 	bl	8001e4c <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa4:	f7fd f9d2 	bl	8001e4c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e0d7      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	4b4b      	ldr	r3, [pc, #300]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ee      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x368>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fd f9c0 	bl	8001e4c <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad0:	f7fd f9bc 	bl	8001e4c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0c1      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae6:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1ee      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d105      	bne.n	8004b04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af8:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	4a3a      	ldr	r2, [pc, #232]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80ad 	beq.w	8004c68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d060      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d145      	bne.n	8004bae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <HAL_RCC_OscConfig+0x4b4>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd f990 	bl	8001e4c <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fd f98c 	bl	8001e4c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e093      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b42:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	3b01      	subs	r3, #1
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	491b      	ldr	r1, [pc, #108]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x4b4>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fd f961 	bl	8001e4c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fd f95d 	bl	8001e4c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e064      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba0:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x452>
 8004bac:	e05c      	b.n	8004c68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <HAL_RCC_OscConfig+0x4b4>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd f94a 	bl	8001e4c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd f946 	bl	8001e4c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e04d      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x480>
 8004bda:	e045      	b.n	8004c68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e040      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bf4:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_RCC_OscConfig+0x538>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d030      	beq.n	8004c64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d129      	bne.n	8004c64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d122      	bne.n	8004c64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d119      	bne.n	8004c64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d10f      	bne.n	8004c64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d107      	bne.n	8004c64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800

08004c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07b      	b.n	8004d82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9a:	d009      	beq.n	8004cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	61da      	str	r2, [r3, #28]
 8004ca2:	e005      	b.n	8004cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fd50 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0104 	and.w	r1, r3, #4
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0210 	and.w	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b08c      	sub	sp, #48	; 0x30
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x26>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e18a      	b.n	80050c6 <HAL_SPI_TransmitReceive+0x33c>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db8:	f7fd f848 	bl	8001e4c <HAL_GetTick>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d00f      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x70>
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de0:	d107      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x68>
 8004dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d003      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
 8004df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004df8:	e15b      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x82>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x82>
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d103      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e12:	e14e      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d003      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2205      	movs	r2, #5
 8004e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	887a      	ldrh	r2, [r7, #2]
 8004e3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	887a      	ldrh	r2, [r7, #2]
 8004e4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d007      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e84:	d178      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x10a>
 8004e8e:	8b7b      	ldrh	r3, [r7, #26]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d166      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	881a      	ldrh	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	1c9a      	adds	r2, r3, #2
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb8:	e053      	b.n	8004f62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d11b      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x176>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x176>
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d113      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	881a      	ldrh	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	1c9a      	adds	r2, r3, #2
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d119      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x1b8>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d014      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	b292      	uxth	r2, r2
 8004f24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f42:	f7fc ff83 	bl	8001e4c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d807      	bhi.n	8004f62 <HAL_SPI_TransmitReceive+0x1d8>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d003      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f60:	e0a7      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1a6      	bne.n	8004eba <HAL_SPI_TransmitReceive+0x130>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1a1      	bne.n	8004eba <HAL_SPI_TransmitReceive+0x130>
 8004f76:	e07c      	b.n	8005072 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x1fc>
 8004f80:	8b7b      	ldrh	r3, [r7, #26]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d16b      	bne.n	800505e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	7812      	ldrb	r2, [r2, #0]
 8004f92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fac:	e057      	b.n	800505e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d11c      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x26c>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d017      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x26c>
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d114      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d119      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x2ae>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d014      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005034:	2301      	movs	r3, #1
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005038:	f7fc ff08 	bl	8001e4c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005044:	429a      	cmp	r2, r3
 8005046:	d803      	bhi.n	8005050 <HAL_SPI_TransmitReceive+0x2c6>
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d102      	bne.n	8005056 <HAL_SPI_TransmitReceive+0x2cc>
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800505c:	e029      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1a2      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x224>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d19d      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f8b2 	bl	80051e0 <SPI_EndRxTxTransaction>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d006      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800508e:	e010      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	e000      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3730      	adds	r7, #48	; 0x30
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050e0:	f7fc feb4 	bl	8001e4c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	4413      	add	r3, r2
 80050ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050f0:	f7fc feac 	bl	8001e4c <HAL_GetTick>
 80050f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050f6:	4b39      	ldr	r3, [pc, #228]	; (80051dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	015b      	lsls	r3, r3, #5
 80050fc:	0d1b      	lsrs	r3, r3, #20
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005106:	e054      	b.n	80051b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510e:	d050      	beq.n	80051b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005110:	f7fc fe9c 	bl	8001e4c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	429a      	cmp	r2, r3
 800511e:	d902      	bls.n	8005126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d13d      	bne.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513e:	d111      	bne.n	8005164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005148:	d004      	beq.n	8005154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d107      	bne.n	8005164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516c:	d10f      	bne.n	800518e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800518c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e017      	b.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d19b      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000004 	.word	0x20000004

080051e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <SPI_EndRxTxTransaction+0x7c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <SPI_EndRxTxTransaction+0x80>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	0d5b      	lsrs	r3, r3, #21
 80051f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520a:	d112      	bne.n	8005232 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	2180      	movs	r1, #128	; 0x80
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff ff5a 	bl	80050d0 <SPI_WaitFlagStateUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e00f      	b.n	8005252 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3b01      	subs	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d0f2      	beq.n	8005232 <SPI_EndRxTxTransaction+0x52>
 800524c:	e000      	b.n	8005250 <SPI_EndRxTxTransaction+0x70>
        break;
 800524e:	bf00      	nop
  }

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000004 	.word	0x20000004
 8005260:	165e9f81 	.word	0x165e9f81

08005264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e041      	b.n	80052fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc fab8 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f000 fac6 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e04e      	b.n	80053ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d01d      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <HAL_TIM_Base_Start_IT+0xc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a19      	ldr	r2, [pc, #100]	; (80053dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x80>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d111      	bne.n	80053a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b06      	cmp	r3, #6
 8005394:	d010      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	e007      	b.n	80053b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e041      	b.n	800547a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fc fa64 	bl	80018d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fa06 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b02      	cmp	r3, #2
 8005496:	d122      	bne.n	80054de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d11b      	bne.n	80054de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0202 	mvn.w	r2, #2
 80054ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f997 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 80054ca:	e005      	b.n	80054d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f989 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f99a 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d122      	bne.n	8005532 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d11b      	bne.n	8005532 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f06f 0204 	mvn.w	r2, #4
 8005502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f96d 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 800551e:	e005      	b.n	800552c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f95f 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f970 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b08      	cmp	r3, #8
 800553e:	d122      	bne.n	8005586 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b08      	cmp	r3, #8
 800554c:	d11b      	bne.n	8005586 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f06f 0208 	mvn.w	r2, #8
 8005556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2204      	movs	r2, #4
 800555c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f943 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 8005572:	e005      	b.n	8005580 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f935 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f946 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b10      	cmp	r3, #16
 8005592:	d122      	bne.n	80055da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d11b      	bne.n	80055da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0210 	mvn.w	r2, #16
 80055aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2208      	movs	r2, #8
 80055b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f919 	bl	80057f8 <HAL_TIM_IC_CaptureCallback>
 80055c6:	e005      	b.n	80055d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f90b 	bl	80057e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f91c 	bl	800580c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d10e      	bne.n	8005606 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f06f 0201 	mvn.w	r2, #1
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f8e5 	bl	80057d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b80      	cmp	r3, #128	; 0x80
 8005612:	d10e      	bne.n	8005632 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d107      	bne.n	8005632 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800562a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fce7 	bl	8006000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d10e      	bne.n	800565e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b40      	cmp	r3, #64	; 0x40
 800564c:	d107      	bne.n	800565e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8e1 	bl	8005820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b20      	cmp	r3, #32
 800566a:	d10e      	bne.n	800568a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b20      	cmp	r3, #32
 8005678:	d107      	bne.n	800568a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f06f 0220 	mvn.w	r2, #32
 8005682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fcb1 	bl	8005fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e048      	b.n	8005744 <HAL_TIM_OC_ConfigChannel+0xb0>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b0c      	cmp	r3, #12
 80056be:	d839      	bhi.n	8005734 <HAL_TIM_OC_ConfigChannel+0xa0>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	08005735 	.word	0x08005735
 80056d0:	08005735 	.word	0x08005735
 80056d4:	08005735 	.word	0x08005735
 80056d8:	0800570b 	.word	0x0800570b
 80056dc:	08005735 	.word	0x08005735
 80056e0:	08005735 	.word	0x08005735
 80056e4:	08005735 	.word	0x08005735
 80056e8:	08005719 	.word	0x08005719
 80056ec:	08005735 	.word	0x08005735
 80056f0:	08005735 	.word	0x08005735
 80056f4:	08005735 	.word	0x08005735
 80056f8:	08005727 	.word	0x08005727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f936 	bl	8005974 <TIM_OC1_SetConfig>
      break;
 8005708:	e017      	b.n	800573a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f99f 	bl	8005a54 <TIM_OC2_SetConfig>
      break;
 8005716:	e010      	b.n	800573a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fa0e 	bl	8005b40 <TIM_OC3_SetConfig>
      break;
 8005724:	e009      	b.n	800573a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fa7b 	bl	8005c28 <TIM_OC4_SetConfig>
      break;
 8005732:	e002      	b.n	800573a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]
      break;
 8005738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e031      	b.n	80057c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 faac 	bl	8005cd4 <TIM_SlaveTimer_SetConfig>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e018      	b.n	80057c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d00f      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a3d      	ldr	r2, [pc, #244]	; (800594c <TIM_Base_SetConfig+0x118>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <TIM_Base_SetConfig+0x120>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d108      	bne.n	8005886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <TIM_Base_SetConfig+0x114>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d02b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005894:	d027      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <TIM_Base_SetConfig+0x118>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d023      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <TIM_Base_SetConfig+0x11c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01f      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <TIM_Base_SetConfig+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a29      	ldr	r2, [pc, #164]	; (8005958 <TIM_Base_SetConfig+0x124>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d017      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <TIM_Base_SetConfig+0x128>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a27      	ldr	r2, [pc, #156]	; (8005960 <TIM_Base_SetConfig+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00f      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <TIM_Base_SetConfig+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a25      	ldr	r2, [pc, #148]	; (8005968 <TIM_Base_SetConfig+0x134>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a24      	ldr	r2, [pc, #144]	; (800596c <TIM_Base_SetConfig+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a23      	ldr	r2, [pc, #140]	; (8005970 <TIM_Base_SetConfig+0x13c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a0a      	ldr	r2, [pc, #40]	; (8005948 <TIM_Base_SetConfig+0x114>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0c      	ldr	r2, [pc, #48]	; (8005958 <TIM_Base_SetConfig+0x124>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	615a      	str	r2, [r3, #20]
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40010400 	.word	0x40010400
 800595c:	40014000 	.word	0x40014000
 8005960:	40014400 	.word	0x40014400
 8005964:	40014800 	.word	0x40014800
 8005968:	40001800 	.word	0x40001800
 800596c:	40001c00 	.word	0x40001c00
 8005970:	40002000 	.word	0x40002000

08005974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0303 	bic.w	r3, r3, #3
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 0302 	bic.w	r3, r3, #2
 80059bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a20      	ldr	r2, [pc, #128]	; (8005a4c <TIM_OC1_SetConfig+0xd8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC1_SetConfig+0x64>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <TIM_OC1_SetConfig+0xdc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10c      	bne.n	80059f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 0308 	bic.w	r3, r3, #8
 80059de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 0304 	bic.w	r3, r3, #4
 80059f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <TIM_OC1_SetConfig+0xd8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_OC1_SetConfig+0x8e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <TIM_OC1_SetConfig+0xdc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d111      	bne.n	8005a26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	621a      	str	r2, [r3, #32]
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400

08005a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0210 	bic.w	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <TIM_OC2_SetConfig+0xe4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC2_SetConfig+0x68>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <TIM_OC2_SetConfig+0xe8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10d      	bne.n	8005ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <TIM_OC2_SetConfig+0xe4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC2_SetConfig+0x94>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <TIM_OC2_SetConfig+0xe8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d113      	bne.n	8005b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400

08005b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <TIM_OC3_SetConfig+0xe0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC3_SetConfig+0x66>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a20      	ldr	r2, [pc, #128]	; (8005c24 <TIM_OC3_SetConfig+0xe4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10d      	bne.n	8005bc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <TIM_OC3_SetConfig+0xe0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <TIM_OC3_SetConfig+0x92>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <TIM_OC3_SetConfig+0xe4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d113      	bne.n	8005bfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	621a      	str	r2, [r3, #32]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <TIM_OC4_SetConfig+0xa4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC4_SetConfig+0x68>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <TIM_OC4_SetConfig+0xa8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 0307 	bic.w	r3, r3, #7
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b70      	cmp	r3, #112	; 0x70
 8005d1c:	d01a      	beq.n	8005d54 <TIM_SlaveTimer_SetConfig+0x80>
 8005d1e:	2b70      	cmp	r3, #112	; 0x70
 8005d20:	d860      	bhi.n	8005de4 <TIM_SlaveTimer_SetConfig+0x110>
 8005d22:	2b60      	cmp	r3, #96	; 0x60
 8005d24:	d054      	beq.n	8005dd0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005d26:	2b60      	cmp	r3, #96	; 0x60
 8005d28:	d85c      	bhi.n	8005de4 <TIM_SlaveTimer_SetConfig+0x110>
 8005d2a:	2b50      	cmp	r3, #80	; 0x50
 8005d2c:	d046      	beq.n	8005dbc <TIM_SlaveTimer_SetConfig+0xe8>
 8005d2e:	2b50      	cmp	r3, #80	; 0x50
 8005d30:	d858      	bhi.n	8005de4 <TIM_SlaveTimer_SetConfig+0x110>
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d019      	beq.n	8005d6a <TIM_SlaveTimer_SetConfig+0x96>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d854      	bhi.n	8005de4 <TIM_SlaveTimer_SetConfig+0x110>
 8005d3a:	2b30      	cmp	r3, #48	; 0x30
 8005d3c:	d055      	beq.n	8005dea <TIM_SlaveTimer_SetConfig+0x116>
 8005d3e:	2b30      	cmp	r3, #48	; 0x30
 8005d40:	d850      	bhi.n	8005de4 <TIM_SlaveTimer_SetConfig+0x110>
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d051      	beq.n	8005dea <TIM_SlaveTimer_SetConfig+0x116>
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d84c      	bhi.n	8005de4 <TIM_SlaveTimer_SetConfig+0x110>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d04d      	beq.n	8005dea <TIM_SlaveTimer_SetConfig+0x116>
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d04b      	beq.n	8005dea <TIM_SlaveTimer_SetConfig+0x116>
 8005d52:	e047      	b.n	8005de4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68d9      	ldr	r1, [r3, #12]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f000 f8a6 	bl	8005eb4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005d68:	e040      	b.n	8005dec <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d101      	bne.n	8005d76 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e03b      	b.n	8005dee <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0201 	bic.w	r2, r2, #1
 8005d8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
      break;
 8005dba:	e017      	b.n	8005dec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6899      	ldr	r1, [r3, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f000 f814 	bl	8005df6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005dce:	e00d      	b.n	8005dec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6899      	ldr	r1, [r3, #8]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f000 f839 	bl	8005e54 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005de2:	e003      	b.n	8005dec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
      break;
 8005de8:	e000      	b.n	8005dec <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005dea:	bf00      	nop
  }

  return status;
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0201 	bic.w	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 030a 	bic.w	r3, r3, #10
 8005e32:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f023 0210 	bic.w	r2, r3, #16
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	031b      	lsls	r3, r3, #12
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	621a      	str	r2, [r3, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	021a      	lsls	r2, r3, #8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e05a      	b.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f58:	d01d      	beq.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a1d      	ldr	r2, [pc, #116]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1a      	ldr	r2, [pc, #104]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d10c      	bne.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40010400 	.word	0x40010400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40001800 	.word	0x40001800

08005fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <__errno>:
 8006014:	4b01      	ldr	r3, [pc, #4]	; (800601c <__errno+0x8>)
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000010 	.word	0x20000010

08006020 <__libc_init_array>:
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	4d0d      	ldr	r5, [pc, #52]	; (8006058 <__libc_init_array+0x38>)
 8006024:	4c0d      	ldr	r4, [pc, #52]	; (800605c <__libc_init_array+0x3c>)
 8006026:	1b64      	subs	r4, r4, r5
 8006028:	10a4      	asrs	r4, r4, #2
 800602a:	2600      	movs	r6, #0
 800602c:	42a6      	cmp	r6, r4
 800602e:	d109      	bne.n	8006044 <__libc_init_array+0x24>
 8006030:	4d0b      	ldr	r5, [pc, #44]	; (8006060 <__libc_init_array+0x40>)
 8006032:	4c0c      	ldr	r4, [pc, #48]	; (8006064 <__libc_init_array+0x44>)
 8006034:	f000 f8fe 	bl	8006234 <_init>
 8006038:	1b64      	subs	r4, r4, r5
 800603a:	10a4      	asrs	r4, r4, #2
 800603c:	2600      	movs	r6, #0
 800603e:	42a6      	cmp	r6, r4
 8006040:	d105      	bne.n	800604e <__libc_init_array+0x2e>
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	f855 3b04 	ldr.w	r3, [r5], #4
 8006048:	4798      	blx	r3
 800604a:	3601      	adds	r6, #1
 800604c:	e7ee      	b.n	800602c <__libc_init_array+0xc>
 800604e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006052:	4798      	blx	r3
 8006054:	3601      	adds	r6, #1
 8006056:	e7f2      	b.n	800603e <__libc_init_array+0x1e>
 8006058:	0800626c 	.word	0x0800626c
 800605c:	0800626c 	.word	0x0800626c
 8006060:	0800626c 	.word	0x0800626c
 8006064:	08006270 	.word	0x08006270

08006068 <memset>:
 8006068:	4402      	add	r2, r0
 800606a:	4603      	mov	r3, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	d100      	bne.n	8006072 <memset+0xa>
 8006070:	4770      	bx	lr
 8006072:	f803 1b01 	strb.w	r1, [r3], #1
 8006076:	e7f9      	b.n	800606c <memset+0x4>

08006078 <sqrt>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	ed2d 8b02 	vpush	{d8}
 800607e:	ec55 4b10 	vmov	r4, r5, d0
 8006082:	f000 f825 	bl	80060d0 <__ieee754_sqrt>
 8006086:	4622      	mov	r2, r4
 8006088:	462b      	mov	r3, r5
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	eeb0 8a40 	vmov.f32	s16, s0
 8006092:	eef0 8a60 	vmov.f32	s17, s1
 8006096:	f7fa fd0d 	bl	8000ab4 <__aeabi_dcmpun>
 800609a:	b990      	cbnz	r0, 80060c2 <sqrt+0x4a>
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	4620      	mov	r0, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa fcde 	bl	8000a64 <__aeabi_dcmplt>
 80060a8:	b158      	cbz	r0, 80060c2 <sqrt+0x4a>
 80060aa:	f7ff ffb3 	bl	8006014 <__errno>
 80060ae:	2321      	movs	r3, #33	; 0x21
 80060b0:	6003      	str	r3, [r0, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	2300      	movs	r3, #0
 80060b6:	4610      	mov	r0, r2
 80060b8:	4619      	mov	r1, r3
 80060ba:	f7fa fb8b 	bl	80007d4 <__aeabi_ddiv>
 80060be:	ec41 0b18 	vmov	d8, r0, r1
 80060c2:	eeb0 0a48 	vmov.f32	s0, s16
 80060c6:	eef0 0a68 	vmov.f32	s1, s17
 80060ca:	ecbd 8b02 	vpop	{d8}
 80060ce:	bd38      	pop	{r3, r4, r5, pc}

080060d0 <__ieee754_sqrt>:
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	ec55 4b10 	vmov	r4, r5, d0
 80060d8:	4e55      	ldr	r6, [pc, #340]	; (8006230 <__ieee754_sqrt+0x160>)
 80060da:	43ae      	bics	r6, r5
 80060dc:	ee10 0a10 	vmov	r0, s0
 80060e0:	ee10 3a10 	vmov	r3, s0
 80060e4:	462a      	mov	r2, r5
 80060e6:	4629      	mov	r1, r5
 80060e8:	d110      	bne.n	800610c <__ieee754_sqrt+0x3c>
 80060ea:	ee10 2a10 	vmov	r2, s0
 80060ee:	462b      	mov	r3, r5
 80060f0:	f7fa fa46 	bl	8000580 <__aeabi_dmul>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4620      	mov	r0, r4
 80060fa:	4629      	mov	r1, r5
 80060fc:	f7fa f88a 	bl	8000214 <__adddf3>
 8006100:	4604      	mov	r4, r0
 8006102:	460d      	mov	r5, r1
 8006104:	ec45 4b10 	vmov	d0, r4, r5
 8006108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800610c:	2d00      	cmp	r5, #0
 800610e:	dc10      	bgt.n	8006132 <__ieee754_sqrt+0x62>
 8006110:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006114:	4330      	orrs	r0, r6
 8006116:	d0f5      	beq.n	8006104 <__ieee754_sqrt+0x34>
 8006118:	b15d      	cbz	r5, 8006132 <__ieee754_sqrt+0x62>
 800611a:	ee10 2a10 	vmov	r2, s0
 800611e:	462b      	mov	r3, r5
 8006120:	ee10 0a10 	vmov	r0, s0
 8006124:	f7fa f874 	bl	8000210 <__aeabi_dsub>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	f7fa fb52 	bl	80007d4 <__aeabi_ddiv>
 8006130:	e7e6      	b.n	8006100 <__ieee754_sqrt+0x30>
 8006132:	1512      	asrs	r2, r2, #20
 8006134:	d074      	beq.n	8006220 <__ieee754_sqrt+0x150>
 8006136:	07d4      	lsls	r4, r2, #31
 8006138:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800613c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006140:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006144:	bf5e      	ittt	pl
 8006146:	0fda      	lsrpl	r2, r3, #31
 8006148:	005b      	lslpl	r3, r3, #1
 800614a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800614e:	2400      	movs	r4, #0
 8006150:	0fda      	lsrs	r2, r3, #31
 8006152:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006156:	107f      	asrs	r7, r7, #1
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	2516      	movs	r5, #22
 800615c:	4620      	mov	r0, r4
 800615e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006162:	1886      	adds	r6, r0, r2
 8006164:	428e      	cmp	r6, r1
 8006166:	bfde      	ittt	le
 8006168:	1b89      	suble	r1, r1, r6
 800616a:	18b0      	addle	r0, r6, r2
 800616c:	18a4      	addle	r4, r4, r2
 800616e:	0049      	lsls	r1, r1, #1
 8006170:	3d01      	subs	r5, #1
 8006172:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006176:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800617a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800617e:	d1f0      	bne.n	8006162 <__ieee754_sqrt+0x92>
 8006180:	462a      	mov	r2, r5
 8006182:	f04f 0e20 	mov.w	lr, #32
 8006186:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800618a:	4281      	cmp	r1, r0
 800618c:	eb06 0c05 	add.w	ip, r6, r5
 8006190:	dc02      	bgt.n	8006198 <__ieee754_sqrt+0xc8>
 8006192:	d113      	bne.n	80061bc <__ieee754_sqrt+0xec>
 8006194:	459c      	cmp	ip, r3
 8006196:	d811      	bhi.n	80061bc <__ieee754_sqrt+0xec>
 8006198:	f1bc 0f00 	cmp.w	ip, #0
 800619c:	eb0c 0506 	add.w	r5, ip, r6
 80061a0:	da43      	bge.n	800622a <__ieee754_sqrt+0x15a>
 80061a2:	2d00      	cmp	r5, #0
 80061a4:	db41      	blt.n	800622a <__ieee754_sqrt+0x15a>
 80061a6:	f100 0801 	add.w	r8, r0, #1
 80061aa:	1a09      	subs	r1, r1, r0
 80061ac:	459c      	cmp	ip, r3
 80061ae:	bf88      	it	hi
 80061b0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80061b4:	eba3 030c 	sub.w	r3, r3, ip
 80061b8:	4432      	add	r2, r6
 80061ba:	4640      	mov	r0, r8
 80061bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80061c0:	f1be 0e01 	subs.w	lr, lr, #1
 80061c4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80061c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80061cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80061d0:	d1db      	bne.n	800618a <__ieee754_sqrt+0xba>
 80061d2:	430b      	orrs	r3, r1
 80061d4:	d006      	beq.n	80061e4 <__ieee754_sqrt+0x114>
 80061d6:	1c50      	adds	r0, r2, #1
 80061d8:	bf13      	iteet	ne
 80061da:	3201      	addne	r2, #1
 80061dc:	3401      	addeq	r4, #1
 80061de:	4672      	moveq	r2, lr
 80061e0:	f022 0201 	bicne.w	r2, r2, #1
 80061e4:	1063      	asrs	r3, r4, #1
 80061e6:	0852      	lsrs	r2, r2, #1
 80061e8:	07e1      	lsls	r1, r4, #31
 80061ea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80061ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80061f2:	bf48      	it	mi
 80061f4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80061f8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80061fc:	4614      	mov	r4, r2
 80061fe:	e781      	b.n	8006104 <__ieee754_sqrt+0x34>
 8006200:	0ad9      	lsrs	r1, r3, #11
 8006202:	3815      	subs	r0, #21
 8006204:	055b      	lsls	r3, r3, #21
 8006206:	2900      	cmp	r1, #0
 8006208:	d0fa      	beq.n	8006200 <__ieee754_sqrt+0x130>
 800620a:	02cd      	lsls	r5, r1, #11
 800620c:	d50a      	bpl.n	8006224 <__ieee754_sqrt+0x154>
 800620e:	f1c2 0420 	rsb	r4, r2, #32
 8006212:	fa23 f404 	lsr.w	r4, r3, r4
 8006216:	1e55      	subs	r5, r2, #1
 8006218:	4093      	lsls	r3, r2
 800621a:	4321      	orrs	r1, r4
 800621c:	1b42      	subs	r2, r0, r5
 800621e:	e78a      	b.n	8006136 <__ieee754_sqrt+0x66>
 8006220:	4610      	mov	r0, r2
 8006222:	e7f0      	b.n	8006206 <__ieee754_sqrt+0x136>
 8006224:	0049      	lsls	r1, r1, #1
 8006226:	3201      	adds	r2, #1
 8006228:	e7ef      	b.n	800620a <__ieee754_sqrt+0x13a>
 800622a:	4680      	mov	r8, r0
 800622c:	e7bd      	b.n	80061aa <__ieee754_sqrt+0xda>
 800622e:	bf00      	nop
 8006230:	7ff00000 	.word	0x7ff00000

08006234 <_init>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	bf00      	nop
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr

08006240 <_fini>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr
